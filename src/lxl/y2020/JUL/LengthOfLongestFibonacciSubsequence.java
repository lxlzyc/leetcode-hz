package lxl.y2020.JUL;

import java.util.HashSet;
import java.util.Set;

/**
 * @program: leetcode-hz
 * @description: 873. 最长的斐波那契子序列的长度
 * 如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的：
 * <p>
 * n >= 3
 * 对于所有 i + 2 <= n，都有 X_i + X_{i+1} = X_{i+2}
 * <p>
 * 给定一个严格递增的正整数数组形成序列，找到 A 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。
 * <p>
 * （回想一下，子序列是从原序列 A 中派生出来的，它从 A 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入: [1,2,3,4,5,6,7,8]
 * 输出: 5
 * 解释:
 * 最长的斐波那契式子序列为：[1,2,3,5,8] 。
 * <p>
 * 示例 2：
 * <p>
 * 输入: [1,3,7,11,12,14,18]
 * 输出: 3
 * 解释:
 * 最长的斐波那契式子序列有：
 * [1,11,12]，[3,11,14] 以及 [7,11,18] 。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 3 <= A.length <= 1000
 * 1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9
 * （对于以 Java，C，C++，以及 C# 的提交，时间限制被减少了 50%）
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @author: lxl
 * @create: 2020-07-28 14:47
 **/
public class LengthOfLongestFibonacciSubsequence {

    //dp dp[i][j]：表示以A[i],A[j]结尾的斐波那契数列的最大长度
    public int lenLongestFibSubseq(int[] A) {
        int m = A.length;
        int[][] dp = new int[m - 1][m];
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < m; i++) {
            set.add(A[i]);
        }
        int max = 0;
        int pre;
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                pre = A[j] - A[i];
                if (set.contains(pre)) {
                    for (int k = i - 1; k >= 0; k--) {
                        if (A[k] == pre) {
                            dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                            break;
                        }
                    }
                    max = Math.max(max, dp[i][j]);
                }
            }
        }
        return max > 0 ? max + 2 : 0;
    }

    public int lenLongestFibSubseq2(int[] A) {
        Set<Integer> set = new HashSet<>();
        int max = 0;
        int l = A.length;
        for (int i = 0; i < l; i++) {
            set.add(A[i]);
        }
        int first;
        int second;
        int index;
        int indexLength;
        Set<String> begins = new HashSet<>();
        for (int i = 0; i < l - 3; i++) {
            if (l - i < max) {
                break;
            }
            for (int j = i + 1; j < l - 2; j++) {
                if (l - j < max - 1) {
                    break;
                }
                first = A[i];
                second = A[j];
                if (!begins.contains(first + "_" + second)) {
                    begins.add(first + "_" + second);
                    index = first + second;
                    indexLength = 2;
                    while (set.contains(index)) {
                        indexLength++;
                        begins.add(second + "_" + index);
                        first = second;
                        second = index;
                        index = first + second;
                    }
                    if (indexLength > 2) {
                        max = Math.max(indexLength, max);
                    }
                }
            }
        }
        return max;
    }

    public static void main(String[] args) {
        LengthOfLongestFibonacciSubsequence lengthOfLongestFibonacciSubsequence = new LengthOfLongestFibonacciSubsequence();
        int[] A = {3, 11, 19, 20, 21, 35, 39, 41, 44, 47, 48, 55, 58, 59, 67, 68, 79, 89, 91, 93, 96, 97, 98, 102, 103, 117, 123, 125, 137, 138, 140, 157, 158, 187, 192, 193, 202, 214, 229, 233, 246, 255, 261,
                295, 317, 325, 327, 331, 367, 370, 403, 412, 488, 509, 514, 527, 545, 596, 603, 649, 667, 783, 826, 841, 852, 876, 963, 973, 1052, 1079, 1271, 1335, 1355, 1379, 1421, 1559, 1701, 2054,
                2161, 2196, 2231, 2297, 2522, 2753, 3325, 3496, 3551, 3610, 3718, 4081, 4454, 5379, 5657, 5747, 5841, 6015, 6603, 7207, 8704, 9153, 9298, 9451, 9733, 10684, 11661, 14083, 14810,
                15045, 15292, 15748, 17287, 18868, 22787, 23963, 24343, 24743, 27971, 30529, 36870, 38773, 39388, 40035, 45258, 49397, 59657, 62736, 63731, 64778, 73229, 79926, 96527, 103119,
                104813, 118487, 129323, 156184, 169591, 191716, 209249, 252711, 274404, 310203, 338572, 408895, 443995, 501919, 547821, 661606, 718399, 812122, 1070501, 1162394, 1314041,
                1732107, 2126163, 2802608, 3019618, 3440204, 3619072, 4147881, 4299901, 4534715, 5566367, 6979835, 7337323, 8540102, 9475531, 9994893, 11872038, 14164725, 16102369, 17259682,
                19209361, 19294826, 19361634, 19774734, 20948672, 24276826, 29502637, 29951468, 30184182, 31081399, 31909870, 35562787, 37341371, 39769605, 41857316, 42087061, 42931948,
                43107586, 44512761, 45950912, 45976117, 47306989, 48594558, 49336400, 50725645, 50746000, 53237057, 53473242, 54135556, 54413036, 55567837, 63245083, 64147377, 64506802,
                65576821, 66015940, 66163850, 67669073, 67969722, 68393465, 69280432, 69559063, 69562255, 69808150, 71103049, 71261658, 71347039, 73642958, 73789708, 75119847, 76515985,
                77072900, 77570308, 79447034, 82454913, 82636792, 83098106, 83142368, 83251285, 83632377, 84765725, 85438865, 85670754, 85774176, 85983305, 86479838, 89445474, 90545978,
                90581162, 90633827, 92323558, 94203341, 94255465, 97422977, 100503969, 101496491, 102308503, 108343188, 108412788, 111103040, 112588252, 115575356, 115856709, 117351805,
                117648306, 119192008, 120068379, 120230293, 121144190, 121298359, 121508157, 124590862, 126939986, 127165334, 130580572, 132477968, 132748619, 132871309, 133584395,
                134991405, 137972542, 138337697, 139477246, 140365537, 141747376, 141927253, 142710797, 145168370, 147392139, 147714979, 147817993, 149801825, 150284562, 151886278,
                153133281, 153925764, 154378144, 155453873, 156456171, 156672509, 157102579, 159565286, 159570006, 161625176, 161784058, 161866263, 165742210, 166676609, 167616504,
                170599628, 170613898, 172347306, 173792570, 174542717, 175062035, 175723847, 176125531, 177387058, 179657562, 180162803, 180771930, 183271141, 184684998, 184849792,
                184876128, 185714244, 185739419, 190677182, 191185534, 192458410, 192758540, 194829169, 195127856, 195566723, 196929030, 197378269, 198293279, 199997943, 202206991,
                204759040, 206888492, 207083803, 208671900, 211323758, 211330379, 213370211, 215158688, 215787158, 216085311, 216646154, 216842789, 216857040, 216988242, 217118279,
                218053335, 218428430, 218529321, 222632553, 222670502, 223643195, 223705133, 224487420, 227406547, 227919845, 227940218, 228754831, 228954803, 229195039, 229253979,
                230540222, 233456505, 233976760, 234055793, 234121318, 234801345, 235355447, 237491869, 238137705, 238158977, 239100225, 239678581, 239721557, 240651976, 241986215,
                244532930, 247490319, 248151502, 249063696, 251015852, 251497485, 251736860, 251852014, 252046194, 252178662, 255547963, 256546068, 257808473, 260241580, 262454441,
                263070851, 267942640, 269284803, 269534947, 271556319, 272501752, 272900211, 274225903, 275198357, 276639779, 277142237, 279297971, 280481013, 280608005, 282445196,
                282908985, 284095177, 284714308, 284986390, 286451353, 286528235, 288419449, 288919613, 289734599, 290207020, 290536372, 292052375, 293018479, 293076617, 298647687};
        System.out.println(System.currentTimeMillis());
        System.out.println(lengthOfLongestFibonacciSubsequence.lenLongestFibSubseq2(A));
        System.out.println(System.currentTimeMillis());
        System.out.println(lengthOfLongestFibonacciSubsequence.lenLongestFibSubseq(A));

        System.out.println(System.currentTimeMillis());

    }
}
